{"version":3,"sources":["components/ResourcesArray.js","validation/index.js","generator/index.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","button","borderRadius","color","backgroundColor","ResourcesArray","values","resourceName","arrayName","resourceAddLabel","classes","name","render","arrayHelpers","length","map","resource","index","key","Grid","container","direction","justify","alignItems","spacing","item","xs","component","TextField","fullWidth","IconButton","className","size","onClick","remove","Box","m","Button","insert","push","validate","errors","projectName","accountId","test","region","stage","isS3Required","s3Array","isDynamoDbRequired","dynamoDbArray","isSqsRequired","sqsArray","isAlbRequired","albArray","isKinesisRequired","kinesisArray","isSnsRequired","snsArray","snsGenerator","topics","account","Effect","Action","Resource","topic","generator","dbs","streams","queueArray","albs","bucketNames","isApiGWRequired","isSgRequired","Version","Statement","bucketName","Resources","albArn","queue","stream","db","filter","property","subheading","fontWeight","fieldTitle","textAlign","fieldTitle2","helperText","Form","setPolicy","initialValues","validation","onSubmit","setSubmitting","submitForm","isSubmitting","Typography","variant","InputLabelProps","shrink","Checkbox","type","inputProps","FormHelperText","disabled","startIcon","fontFamilyMetropolis","fontFamily","join","letterSpacing","theme","createMuiTheme","typography","h1","h2","h3","h4","h5","h6","subtitle1","header","App","useState","policy","copyHandler","navigator","clipboard","writeText","JSON","stringify","ThemeProvider","p","md","src","mt","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b6fcde53.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Button, makeStyles, IconButton, Box } from '@material-ui/core';\nimport { Field, FieldArray } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nconst useStyles = makeStyles({\n  button: {\n    borderRadius: 5,\n    color: '#FFF',\n    backgroundColor: '#fd5750',\n    '&:hover': {\n      backgroundColor: '#FD8984',\n    },\n  },\n});\n\nexport default function ResourcesArray({ values, resourceName, arrayName, resourceAddLabel }) {\n  const classes = useStyles();\n\n  return (\n    <>\n      {values[resourceName] ? (\n        <FieldArray\n          name={arrayName}\n          render={(arrayHelpers) => (\n            <>\n              {values[arrayName] && values[arrayName].length > 0 ? (\n                <>\n                  {values[arrayName].map((resource, index) => (\n                    <div key={index}>\n                      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                        <Grid item xs={9}>\n                          <Field component={TextField} name={`${arrayName}.${index}`} fullWidth />\n                        </Grid>\n                        <Grid item xs={3}>\n                          <IconButton\n                            className={classes.button}\n                            component=\"span\"\n                            size=\"small\"\n                            onClick={() => arrayHelpers.remove(index)} // remove a resource from the list\n                          >\n                            <RemoveIcon />\n                          </IconButton>\n                        </Grid>\n                      </Grid>\n                    </div>\n                  ))}\n                  <Box m={1}>\n                    <Button\n                      className={classes.button}\n                      onClick={() => arrayHelpers.insert(values[arrayName].length, '')}\n                      size=\"small\"\n                    >\n                      {/* show this when user has removed all resource from the list */}\n                      {resourceAddLabel}\n                    </Button>\n                  </Box>\n                </>\n              ) : (\n                <Button className={classes.button} onClick={() => arrayHelpers.push('')} size=\"small\">\n                  {/* show this when user has removed all resource from the list */}\n                  {resourceAddLabel}\n                </Button>\n              )}\n            </>\n          )}\n        />\n      ) : null}\n    </>\n  );\n}\n","const validate = (values) => {\n  const errors = {};\n\n  // proiect meta data validation \n\n  if (!values.projectName) {\n    errors.projectName = 'Required';\n  }\n  if (!values.accountId) {\n    errors.accountId = 'Required';\n  } else if (!/^[0-9\\b]+$/.test(values.accountId)) {\n    errors.accountId = 'Invalid ID';\n  }\n  if (!values.region) {\n    errors.region = 'Required';\n  }\n  if (!values.stage) {\n    errors.stage = 'Required';\n  }\n\n  // project permission validations \n\n  if (values.isS3Required === true && values.s3Array.length === 0) {\n    errors.isS3Required = ' Please add a bucket';\n  }\n\n  if (values.isDynamoDbRequired === true && values.dynamoDbArray.length === 0) {\n    errors.isDynamoDbRequired = ' Please add a database';\n  }\n\n  if (values.isSqsRequired === true && values.sqsArray.length === 0) {\n    errors.isSqsRequired = ' Please add a queue';\n  }\n\n  if (values.isAlbRequired === true && values.albArray.length === 0) {\n    errors.isAlbRequired = ' Please add a listner';\n  }\n\n  if (values.isKinesisRequired === true && values.kinesisArray.length === 0) {\n    errors.isKinesisRequired = ' Please add a stream';\n  }\n\n  if (values.isSnsRequired === true && values.snsArray.length === 0) {\n    errors.isSnsRequired = ' Please add a topic';\n  }\n\n  return errors;\n};\n\nexport default validate;\n","const s3Generator = (bucketNames) => {\n  return {\n    Effect: 'Allow',\n    Action: [\n      's3:GetBucketLocation',\n      's3:CreateBucket',\n      's3:DeleteBucket',\n      's3:ListBucket',\n      's3:GetBucketPolicy',\n      's3:PutBucketPolicy',\n      's3:ListBucketVersions',\n      's3:PutAccelerateConfiguration',\n      's3:GetEncryptionConfiguration',\n      's3:PutEncryptionConfiguration',\n    ],\n    Resource: bucketNames.map((bucketName) => `arn:aws:s3:::${bucketName}`),\n  };\n};\n\nconst kinesisGenerator = (streams) => {\n  return {\n    Effect: 'Allow',\n    Action: 'kinesis:*',\n    Resource: streams.map((stream) => `arn:aws:kinesis:*:*:stream/${stream}`),\n  };\n};\n\nconst sqsGenerator = (queueArray) => {\n  return {\n    Effect: 'Allow',\n    Action: 'sqs:*',\n    Resource: queueArray.map((queue) => `arn:aws:sqs:*:${queue}`),\n  };\n};\n\n// when attaching ALBs instead of API gateways\nconst albGenerator = (albs) => {\n  return {\n    Effect: 'Allow',\n    Action: [\n      'elasticloadbalancing:RegisterTargets',\n      'elasticloadbalancing:DescribeRules',\n      'elasticloadbalancing:DeleteRule',\n      'elasticloadbalancing:CreateTargetGroup',\n      'elasticloadbalancing:ModifyTargetGroup',\n      'elasticloadbalancing:ModifyTargetGroupAttributes',\n      'elasticloadbalancing:ModifyRule',\n      'elasticloadbalancing:ModifyListener',\n      'elasticloadbalancing:AddTags',\n      'elasticloadbalancing:DeleteTargetGroup',\n      'elasticloadbalancing:DescribeTargetGroups',\n      'elasticloadbalancing:DescribeTargetHealth',\n      'elasticloadbalancing:CreateRule',\n    ],\n    // TODO: identify last code in Listener ARN eg `arn:aws:elasticloadbalancing:${region}:${accountId}:listener/app/bff-alb-dev/b14591ea09ab9bd5/a6fac441aee4440b`\n    Resources: albs.map((albArn) => `${albArn}`),\n  };\n};\n\n// TODO: fix all access\n// sg attach and VPC attach to lambda\nconst sgGenerator = (sGroups) => {\n  return {\n    Effect: 'Allow',\n    Action: [\n      'ec2:AuthorizeSecurityGroupEgress',\n      'ec2:AuthorizeSecurityGroupIngress',\n      'ec2:CreateSecurityGroup',\n      'ec2:DeleteSecurityGroup',\n      'ec2:DescribeSecurityGroups',\n      'ec2:DescribeNetworkInterfaces',\n      'ec2:DescribeSubnets',\n      'ec2:DescribeVpcs',\n      'ec2:DescribeDhcpOptions',\n      'ec2:RevokeSecurityGroupEgress',\n      'ec2:RevokeSecurityGroupIngress',\n      'ec2:CreateNetworkInterfacePermission',\n      'ec2:CreateNetworkInterface',\n      'ec2:DeleteNetworkInterfacePermission',\n      'ec2:DeleteNetworkInterface',\n      'ec2:createTags',\n      'ec2:deleteTags',\n    ],\n    Resource: ['*'],\n  };\n};\n\nconst dynamoDBGenerator = (dbs, account) => {\n  return {\n    Effect: 'Allow',\n    Action: ['dynamodb:*'],\n    Resource: dbs.map((db) => `arn:aws:dynamodb:*:${account}:table/${db}`),\n  };\n};\n\nconst snsGenerator = (topics, region, account) => {\n  return {\n    Effect: 'Allow',\n    Action: ['sns:*'],\n    Resource: topics.map((topic) => `arn:aws:sns:${region}:${account}:${topic}`),\n  };\n};\n\nconst apiGWGenerator = () => {\n  return {\n    Effect: 'Allow',\n    Action: ['apigateway:GET', 'apigateway:POST', 'apigateway:PUT', 'apigateway:DELETE', 'apigateway:PATCH'],\n    Resource: [\n      'arn:aws:apigateway:*::/restapis*',\n      'arn:aws:apigateway:*::/apikeys*',\n      'arn:aws:apigateway:*::/usageplans*',\n    ],\n  };\n};\n\nconst generator = ({\n  projectName,\n  accountId,\n  stage,\n  region,\n  isS3Required,\n  s3Array,\n  isSnsRequired,\n  snsArray,\n  isApiGWRequired,\n  isSgRequired,\n  isAlbRequired,\n  albArray,\n  isSqsRequired,\n  sqsArray,\n  isKinesisRequired,\n  kinesisArray,\n  isDynamoDbRequired,\n  dynamoDbArray,\n}) => {\n  return {\n    Version: '2012-10-17',\n    Statement: [\n      {\n        Effect: 'Allow',\n        Action: ['cloudformation:List*', 'cloudformation:Get*', 'cloudformation:ValidateTemplate'],\n        Resource: ['*'],\n      },\n      {\n        Effect: 'Allow',\n        Action: [\n          'cloudformation:CreateStack',\n          'cloudformation:CreateUploadBucket',\n          'cloudformation:DeleteStack',\n          'cloudformation:Describe*',\n          'cloudformation:UpdateStack',\n        ],\n        Resource: [`arn:aws:cloudformation:${region}:${accountId}:stack/${projectName}-${stage}/*`],\n      },\n      {\n        Effect: 'Allow',\n        Action: ['lambda:Get*', 'lambda:List*', 'lambda:CreateFunction'],\n        Resource: ['*'],\n      },\n      {\n        Effect: 'Allow',\n        Action: [\n          's3:GetBucketLocation',\n          's3:CreateBucket',\n          's3:DeleteBucket',\n          's3:ListBucket',\n          's3:GetBucketPolicy',\n          's3:PutBucketPolicy',\n          's3:ListBucketVersions',\n          's3:PutAccelerateConfiguration',\n          's3:GetEncryptionConfiguration',\n          's3:PutEncryptionConfiguration',\n        ],\n        Resource: [`arn:aws:s3:::${projectName}*serverlessdeploy*`],\n      },\n      {\n        Effect: 'Allow',\n        Action: ['s3:PutObject', 's3:GetObject', 's3:DeleteObject'],\n        Resource: [`arn:aws:s3:::${projectName}*serverlessdeploy*`],\n      },\n      {\n        Effect: 'Allow',\n        Action: [\n          'lambda:AddPermission',\n          'lambda:CreateAlias',\n          'lambda:DeleteFunction',\n          'lambda:InvokeFunction',\n          'lambda:PublishVersion',\n          'lambda:RemovePermission',\n          'lambda:Update*',\n        ],\n        Resource: [`arn:aws:lambda:${region}:${accountId}:function:${projectName}-${stage}-*`],\n      },\n\n      {\n        Effect: 'Allow',\n        Action: ['cloudwatch:GetMetricStatistics'],\n        Resource: ['*'],\n      },\n      {\n        Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:DeleteLogGroup'],\n        Resource: [`arn:aws:logs:${region}:${accountId}:*`],\n        Effect: 'Allow',\n      },\n      {\n        Action: ['logs:PutLogEvents'],\n        Resource: [`arn:aws:logs:${region}:${accountId}:*`],\n        Effect: 'Allow',\n      },\n      {\n        Effect: 'Allow',\n        Action: ['logs:DescribeLogStreams', 'logs:DescribeLogGroups', 'logs:FilterLogEvents'],\n        Resource: ['*'],\n      },\n      {\n        Effect: 'Allow',\n        Action: ['events:Put*', 'events:Remove*', 'events:Delete*'],\n        Resource: [`arn:aws:events:${region}:${accountId}:rule/${projectName}-${stage}-${region}`],\n      },\n      {\n        Effect: 'Allow',\n        Action: ['events:DescribeRule'],\n        Resource: [`arn:aws:events:${region}:${accountId}:rule/${projectName}-${stage}-*`],\n      },\n      {\n        Effect: 'Allow',\n        Action: ['iam:PassRole'],\n        Resource: [`arn:aws:iam::${accountId}:role/*`],\n      },\n      {\n        Effect: 'Allow',\n        Action: ['iam:GetRole', 'iam:CreateRole', 'iam:PutRolePolicy', 'iam:DeleteRolePolicy', 'iam:DeleteRole'],\n        Resource: [`arn:aws:iam::${accountId}:role/${projectName}-${stage}-${region}-lambdaRole`],\n      },\n      isS3Required && s3Generator(s3Array),\n      isSnsRequired && snsGenerator(snsArray, region, accountId),\n      isApiGWRequired && apiGWGenerator(),\n      isSgRequired && sgGenerator(),\n      isAlbRequired && albGenerator(albArray),\n      isSqsRequired && sqsGenerator(sqsArray),\n      isKinesisRequired && kinesisGenerator(kinesisArray),\n      isDynamoDbRequired && dynamoDBGenerator(dynamoDbArray, accountId),\n    ].filter((property) => property),\n  };\n};\n\nexport default generator;\n","import React from 'react';\nimport { Typography, Grid, Button, Box, makeStyles, FormHelperText } from '@material-ui/core';\nimport BuildIcon from '@material-ui/icons/Build';\nimport { Formik, Form as FormikForm, Field } from 'formik';\nimport { TextField, Checkbox } from 'formik-material-ui';\nimport ResourcesArray from './ResourcesArray';\nimport validation from 'validation';\nimport generator from 'generator';\n\nconst useStyles = makeStyles({\n  subheading: {\n    color: '#fd5750',\n    fontWeight: '800',\n  },\n  button: {\n    borderRadius: 5,\n    color: '#FFF',\n    backgroundColor: '#fd5750',\n    '&:hover': {\n      backgroundColor: '#FD8984',\n    },\n  },\n  fieldTitle: {\n    textAlign: 'right',\n    fontWeight: '600',\n  },\n  fieldTitle2: {\n    fontWeight: '600',\n  },\n  helperText: {\n    color: '#f02e2e',\n  },\n});\n\nexport default function Form({ setPolicy }) {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          projectName: '',\n          accountId: '',\n          stage: '',\n          region: '',\n          isS3Required: false,\n          isSnsRequired: false,\n          isSqsRequired: false,\n          isApiGWRequired: false,\n          isSgRequired: false,\n          isKinesisRequired: false,\n          isAlbRequired: false,\n          isDynamoDbRequired: false,\n          s3Array: [],\n          dynamoDbArray: [],\n          sqsArray: [],\n          albArray: [],\n          kinesisArray: [],\n          snsArray: [],\n        }}\n        validate={validation}\n        onSubmit={(values, { setSubmitting }) => {\n          setSubmitting(false);\n          setPolicy(generator(values));\n        }}\n      >\n        {({ submitForm, isSubmitting, values, errors }) => (\n          <FormikForm>\n            <Box m={2}>\n              <Typography variant=\"h6\" component=\"h2\" className={classes.subheading}>\n                Project Meta Data\n              </Typography>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    Serverless Project Name\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={TextField} fullWidth name=\"projectName\" InputLabelProps={{ shrink: false }} />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    AWS Account ID\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={TextField} name=\"accountId\" InputLabelProps={{ shrink: false }} fullWidth />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    AWS Region\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={TextField} name=\"region\" InputLabelProps={{ shrink: false }} fullWidth />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    Application Stage\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={TextField} name=\"stage\" InputLabelProps={{ shrink: false }} fullWidth />\n                </Grid>\n              </Grid>\n            </Box>\n\n            {/* Second Part */}\n            <Box m={2}>\n              <Typography variant=\"h6\" component=\"h2\" className={classes.subheading}>\n                Project Permission\n              </Typography>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    Amazon API Gateway\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"isApiGWRequired\"\n                    inputProps={{ 'aria-label': 'security checkbox' }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    EC2 (Elastic Compute Cloud) Security Groups\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"isSgRequired\"\n                    inputProps={{ 'aria-label': 'security checkbox' }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    S3 (Simple Static Storage)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"isS3Required\"\n                    inputProps={{ 'aria-label': 's3 checkbox' }}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"isS3Required\"\n                    arrayName=\"s3Array\"\n                    resourceAddLabel=\"add bucket\"\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                {errors.isS3Required && (\n                  <>\n                    <FormHelperText className={classes.helperText}>{errors.isS3Required}</FormHelperText>\n                  </>\n                )}\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    DynamoDB\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"isDynamoDbRequired\"\n                    inputProps={{ 'aria-label': 'dynamoDB checkbox' }}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"isDynamoDbRequired\"\n                    arrayName=\"dynamoDbArray\"\n                    resourceAddLabel=\"add db\"\n                  />\n                </Grid>\n\n                \n                <Grid item xs={12}>\n                {errors.isDynamoDbRequired && (\n                  <FormHelperText className={classes.helperText}>{errors.isDynamoDbRequired}</FormHelperText>\n                )}\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    SNS (Simple Notification Service)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"isSnsRequired\"\n                    inputProps={{ 'aria-label': 'sns checkbox' }}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"isSnsRequired\"\n                    arrayName=\"snsArray\"\n                    resourceAddLabel=\"add topic\"\n                  />\n                </Grid>\n\n                \n                <Grid item xs={12}>\n                {errors.isSnsRequired && (\n                  <FormHelperText className={classes.helperText}>{errors.isSnsRequired}</FormHelperText>\n                )}\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    ALB (Application Load Balancer)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"isAlbRequired\"\n                    inputProps={{ 'aria-label': 'alb checkbox' }}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"isAlbRequired\"\n                    arrayName=\"albArray\"\n                    resourceAddLabel=\"add listener\"\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                {errors.isAlbRequired && (\n                  <FormHelperText className={classes.helperText}>{errors.isAlbRequired}</FormHelperText>\n                )}\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    Amazon Kinesis\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"isKinesisRequired\"\n                    inputProps={{ 'aria-label': 'security checkbox' }}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"isKinesisRequired\"\n                    arrayName=\"kinesisArray\"\n                    resourceAddLabel=\"add stream\"\n                  />\n                </Grid>\n\n                <Grid item xs ={12}>\n                {errors.isKinesisRequired && (\n                  <FormHelperText className={classes.helperText}>{errors.isKinesisRequired}</FormHelperText>\n                )}\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    SQS (Simple Queue Service)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"isSqsRequired\"\n                    inputProps={{ 'aria-label': 'security checkbox' }}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"isSqsRequired\"\n                    arrayName=\"sqsArray\"\n                    resourceAddLabel=\"add queue\"\n                  />\n                </Grid>\n\n                <Grid item xs ={12}>\n                  {errors.isSqsRequired && (\n                    <FormHelperText className={classes.helperText}>{errors.isSqsRequired}</FormHelperText>\n                  )}\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n                <Grid item>\n                  <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    size=\"small\"\n                    disabled={isSubmitting}\n                    onClick={submitForm}\n                    startIcon={<BuildIcon />}\n                  >\n                    Generate\n                  </Button>\n                </Grid>\n              </Grid>\n            </Box>\n          </FormikForm>\n        )}\n      </Formik>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { Typography, Grid, Box, Button } from '@material-ui/core';\nimport { makeStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport ReactJson from 'react-json-view';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Form from './components/Form';\n\nconst fontFamilyMetropolis = {\n  fontFamily: [\n    'Metropolis',\n    'Arial',\n    'sans-serif',\n    '\"Apple Color Emoji\"',\n    '\"Segoe UI Emoji\"',\n    '\"Segoe UI Symbol\"',\n  ].join(','),\n  letterSpacing: '0.015rem',\n};\n\nconst theme = createMuiTheme({\n  typography: {\n    h1: {\n      ...fontFamilyMetropolis,\n    },\n    h2: {\n      ...fontFamilyMetropolis,\n    },\n    h3: {\n      ...fontFamilyMetropolis,\n    },\n    h4: {\n      ...fontFamilyMetropolis,\n    },\n    h5: {\n      ...fontFamilyMetropolis,\n    },\n    h6: {\n      ...fontFamilyMetropolis,\n    },\n    subtitle1: {\n      ...fontFamilyMetropolis,\n    },\n    button: {\n      ...fontFamilyMetropolis,\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  subheading: {\n    color: '#fd5750',\n    fontWeight: '800',\n  },\n  button: {\n    borderRadius: 5,\n    color: '#FFF',\n    backgroundColor: '#fd5750',\n    '&:hover': {\n      backgroundColor: '#FD8984',\n    },\n  },\n  fieldTitle: {\n    textAlign: 'right',\n    fontWeight: '600',\n  },\n  fieldTitle2: {\n    fontWeight: '600',\n  },\n  header: {\n    backgroundColor: '#282c34',\n    color: 'white',\n    textAlign: 'center',\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  const [policy, setPolicy] = useState(null);\n\n  const copyHandler = () => {\n    navigator.clipboard.writeText(JSON.stringify(policy, null, 2));\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        <header className={classes.header}>\n          <Box p={2}>\n            <Typography variant=\"h4\" component=\"h1\">\n              Serverless Permission Policy Generator\n            </Typography>\n          </Box>\n        </header>\n        <Grid container>\n          <Grid item md={4} xs={12}>\n            <Form setPolicy={setPolicy} />\n          </Grid>\n\n          <Grid item md={8} xs={12}>\n            <Box m={2}>\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n                <Grid item>\n                  <Typography variant=\"h6\" component=\"h2\" className={classes.subheading}>\n                    Generated Policy\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    size=\"small\"\n                    startIcon={<FileCopyIcon />}\n                    onClick={copyHandler}\n                  >\n                    Copy to Clipboard\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {policy && <ReactJson src={policy} name={false} />}\n              <Box mt={2}>\n                {policy && (\n                  <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    size=\"small\"\n                    startIcon={<FileCopyIcon />}\n                    onClick={copyHandler}\n                  >\n                    Copy to Clipboard\n                  </Button>\n                )}\n              </Box>\n            </Box>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'fontsource-roboto';\nimport 'typeface-metropolis';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}