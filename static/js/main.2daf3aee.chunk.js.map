{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fontFamilyMetropolis","fontFamily","join","letterSpacing","theme","createMuiTheme","typography","h1","h2","h3","h4","h5","h6","subtitle1","button","useStyles","makeStyles","subheading","color","fontWeight","borderRadius","backgroundColor","fieldTitle","textAlign","fieldTitle2","header","App","classes","React","useState","checkedA","checkedB","state","setState","handleChange","event","target","name","checked","ThemeProvider","className","Box","p","Typography","variant","component","Grid","container","item","md","xs","m","direction","justify","alignItems","spacing","TextField","fullWidth","id","InputLabelProps","shrink","Checkbox","onChange","inputProps","Button","size","startIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2daf3aee.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { TextField, Typography, Grid, Button, Box } from \"@material-ui/core\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport {\n  makeStyles,\n  ThemeProvider,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\n\nconst fontFamilyMetropolis = {\n  fontFamily: [\n    \"Metropolis\",\n    \"Arial\",\n    \"sans-serif\",\n    '\"Apple Color Emoji\"',\n    '\"Segoe UI Emoji\"',\n    '\"Segoe UI Symbol\"',\n  ].join(\",\"),\n  letterSpacing: \"0.015rem\",\n};\n\nconst theme = createMuiTheme({\n  typography: {\n    h1: {\n      ...fontFamilyMetropolis,\n    },\n    h2: {\n      ...fontFamilyMetropolis,\n    },\n    h3: {\n      ...fontFamilyMetropolis,\n    },\n    h4: {\n      ...fontFamilyMetropolis,\n    },\n    h5: {\n      ...fontFamilyMetropolis,\n    },\n    h6: {\n      ...fontFamilyMetropolis,\n    },\n    subtitle1: {\n      ...fontFamilyMetropolis,\n    },\n    button: {\n      ...fontFamilyMetropolis,\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  subheading: {\n    color: \"#fd5750\",\n    fontWeight: \"800\",\n  },\n  button: {\n    borderRadius: 5,\n    color: \"#FFF\",\n    backgroundColor: \"#fd5750\",\n    \"&:hover\": {\n      backgroundColor: \"#FD8984\",\n    },\n  },\n  fieldTitle: {\n    textAlign: \"right\",\n    fontWeight: \"600\",\n  },\n  fieldTitle2: {\n    fontWeight: \"600\",\n  },\n  header: {\n    backgroundColor: \"#282c34\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        <header className={classes.header}>\n          <Box p={2}>\n            <Typography variant=\"h4\" component=\"h1\">\n              Serverless Permission Policy Generator\n            </Typography>\n          </Box>\n        </header>\n        <Grid container>\n          <Grid item md={4} xs={12}>\n            <Box m={2}>\n              <Typography\n                variant=\"h6\"\n                component=\"h2\"\n                className={classes.subheading}\n              >\n                Project Meta Data\n              </Typography>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    Serverless Project Name\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    fullWidth\n                    id=\"standard-search\"\n                    InputLabelProps={{ shrink: false }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    AWS Account ID\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"standard-search\"\n                    InputLabelProps={{ shrink: false }}\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    AWS Region\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"standard-search\"\n                    InputLabelProps={{ shrink: false }}\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    Application Stage\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"standard-search\"\n                    InputLabelProps={{ shrink: false }}\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n            </Box>\n\n            {/* Second Part */}\n            <Box m={2}>\n              <Typography\n                variant=\"h6\"\n                component=\"h2\"\n                className={classes.subheading}\n              >\n                Project Permission\n              </Typography>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    S3 (Simple Static Storage)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Checkbox\n                    checked={state.checked}\n                    onChange={handleChange}\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    DynamoDB\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Checkbox\n                    checked={state.checked}\n                    onChange={handleChange}\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    SNS (Simple Notification Service)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Checkbox\n                    checked={state.checked}\n                    onChange={handleChange}\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    SES (Simple Email Service)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Checkbox\n                    checked={state.checked}\n                    onChange={handleChange}\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item xs>\n                  <Typography\n                    variant=\"subtitle1\"\n                    className={classes.fieldTitle}\n                  >\n                    EC2 (Elastic Compute Cloud)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Checkbox\n                    checked={state.checked}\n                    onChange={handleChange}\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={2}\n              >\n                <Grid item>\n                  <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    size=\"small\"\n                    startIcon={<FileCopyIcon />}\n                  >\n                    Copy\n                  </Button>\n                </Grid>\n\n                <Grid item>\n                  <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    size=\"small\"\n                    startIcon={<GetAppIcon />}\n                  >\n                    download\n                  </Button>\n                </Grid>\n              </Grid>\n            </Box>\n          </Grid>\n\n          <Grid item md={8} xs={12}>\n            <Box m={2}>\n              <Typography\n                variant=\"subtitle1\"\n                component=\"h2\"\n                className={classes.subheading}\n              >\n                Generated Code Here\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'fontsource-roboto';\nimport 'typeface-metropolis';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}