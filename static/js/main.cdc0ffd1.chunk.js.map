{"version":3,"sources":["components/ResourcesArray.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","button","borderRadius","color","backgroundColor","ResourcesArray","values","resourceName","arrayName","resourceAddLabel","classes","name","render","arrayHelpers","length","map","resource","index","key","Grid","container","direction","justify","alignItems","spacing","item","xs","component","TextField","fullWidth","IconButton","className","size","onClick","remove","Box","m","Button","insert","push","subheading","fontWeight","fieldTitle","textAlign","fieldTitle2","Form","initialValues","s3","sns","ec2Sg","ses","dynamodb","s3Array","dynamoDbArray","sesArray","snsArray","ec2SgArray","onSubmit","setSubmitting","setTimeout","alert","JSON","stringify","submitForm","isSubmitting","Typography","variant","InputLabelProps","shrink","Checkbox","type","inputProps","startIcon","disabled","fontFamilyMetropolis","fontFamily","join","letterSpacing","theme","createMuiTheme","typography","h1","h2","h3","h4","h5","h6","subtitle1","header","App","ThemeProvider","p","md","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdc0ffd1.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Button, makeStyles, IconButton, Box } from '@material-ui/core';\nimport { Field, FieldArray } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nconst useStyles = makeStyles({\n  button: {\n    borderRadius: 5,\n    color: '#FFF',\n    backgroundColor: '#fd5750',\n    '&:hover': {\n      backgroundColor: '#FD8984',\n    },\n  },\n});\n\nexport default function ResourcesArray({ values, resourceName, arrayName, resourceAddLabel }) {\n  const classes = useStyles();\n\n  return (\n    <>\n      {values[resourceName] ? (\n        <FieldArray\n          name={arrayName}\n          render={(arrayHelpers) => (\n            <>\n              {values[arrayName] && values[arrayName].length > 0 ? (\n                <>\n                  {values[arrayName].map((resource, index) => (\n                    <div key={index}>\n                      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                        <Grid item xs={9}>\n                          <Field component={TextField} name={`${arrayName}.${index}`} fullWidth />\n                        </Grid>\n                        <Grid item xs={3}>\n                          <IconButton\n                            className={classes.button}\n                            component=\"span\"\n                            size=\"small\"\n                            onClick={() => arrayHelpers.remove(index)} // remove a resource from the list\n                          >\n                            <RemoveIcon />\n                          </IconButton>\n                        </Grid>\n                      </Grid>\n                    </div>\n                  ))}\n                  <Box m={1}>\n                    <Button\n                      className={classes.button}\n                      onClick={() => arrayHelpers.insert(values[arrayName].length, '')}\n                      size=\"small\"\n                    >\n                      {/* show this when user has removed all resource from the list */}\n                      {resourceAddLabel}\n                    </Button>\n                  </Box>\n                </>\n              ) : (\n                <Button className={classes.button} onClick={() => arrayHelpers.push('')} size=\"small\">\n                  {/* show this when user has removed all resource from the list */}\n                  {resourceAddLabel}\n                </Button>\n              )}\n            </>\n          )}\n        />\n      ) : null}\n    </>\n  );\n}\n","import React from 'react';\nimport { Typography, Grid, Button, Box, makeStyles } from '@material-ui/core';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { Formik, Form as FormikForm, Field } from 'formik';\nimport { TextField, Checkbox } from 'formik-material-ui';\nimport ResourcesArray from './ResourcesArray';\n\nconst useStyles = makeStyles({\n  subheading: {\n    color: '#fd5750',\n    fontWeight: '800',\n  },\n  button: {\n    borderRadius: 5,\n    color: '#FFF',\n    backgroundColor: '#fd5750',\n    '&:hover': {\n      backgroundColor: '#FD8984',\n    },\n  },\n  fieldTitle: {\n    textAlign: 'right',\n    fontWeight: '600',\n  },\n  fieldTitle2: {\n    fontWeight: '600',\n  },\n});\n\nexport default function Form() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          s3: false,\n          sns: false,\n          ec2Sg: false,\n          ses: false,\n          dynamodb: false,\n          s3Array: [],\n          dynamoDbArray: [],\n          sesArray: [],\n          snsArray: [],\n          ec2SgArray: [],\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            setSubmitting(false);\n            alert(JSON.stringify(values, null, 2));\n          }, 500);\n        }}\n      >\n        {({ submitForm, isSubmitting, values }) => (\n          <FormikForm>\n            <Box m={2}>\n              <Typography variant=\"h6\" component=\"h2\" className={classes.subheading}>\n                Project Meta Data\n              </Typography>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    Serverless Project Name\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={TextField} fullWidth name=\"projectName\" InputLabelProps={{ shrink: false }} />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    AWS Account ID\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={TextField} name=\"accountId\" InputLabelProps={{ shrink: false }} fullWidth />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    AWS Region\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={TextField} name=\"region\" InputLabelProps={{ shrink: false }} fullWidth />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    Application Stage\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={TextField} name=\"stage\" InputLabelProps={{ shrink: false }} fullWidth />\n                </Grid>\n              </Grid>\n            </Box>\n\n            {/* Second Part */}\n            <Box m={2}>\n              <Typography variant=\"h6\" component=\"h2\" className={classes.subheading}>\n                Project Permission\n              </Typography>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    S3 (Simple Static Storage)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field component={Checkbox} type=\"checkbox\" name=\"s3\" inputProps={{ 'aria-label': 's3 checkbox' }} />\n                </Grid>\n                <Grid item xs={12}>\n                  <ResourcesArray values={values} resourceName=\"s3\" arrayName=\"s3Array\" resourceAddLabel=\"add bucket\" />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    DynamoDB\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"dynamodb\"\n                    inputProps={{ 'aria-label': 'dynamoDB checkbox' }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"dynamodb\"\n                    arrayName=\"dynamoDbArray\"\n                    resourceAddLabel=\"add db\"\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    SNS (Simple Notification Service)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"sns\"\n                    inputProps={{ 'aria-label': 'sns checkbox' }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"sns\"\n                    arrayName=\"snsArray\"\n                    resourceAddLabel=\"add topic\"\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    SES (Simple Email Service)\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"ses\"\n                    inputProps={{ 'aria-label': 'ses checkbox' }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <ResourcesArray values={values} resourceName=\"ses\" arrayName=\"sesArray\" resourceAddLabel=\"add ses\" />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <Grid item xs={8}>\n                  <Typography variant=\"subtitle1\" className={classes.fieldTitle}>\n                    EC2 (Elastic Compute Cloud) Security Groups\n                  </Typography>\n                </Grid>\n                <Grid item xs>\n                  <Field\n                    component={Checkbox}\n                    type=\"checkbox\"\n                    name=\"ec2Sg\"\n                    inputProps={{ 'aria-label': 'security checkbox' }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <ResourcesArray\n                    values={values}\n                    resourceName=\"ec2Sg\"\n                    arrayName=\"ec2SgArray\"\n                    resourceAddLabel=\"add security group\"\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n                <Grid item>\n                  <Button className={classes.button} variant=\"contained\" size=\"small\" startIcon={<FileCopyIcon />}>\n                    Copy\n                  </Button>\n                </Grid>\n\n                <Grid item>\n                  <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    size=\"small\"\n                    disabled={isSubmitting}\n                    onClick={submitForm}\n                    startIcon={<GetAppIcon />}\n                  >\n                    download\n                  </Button>\n                </Grid>\n              </Grid>\n            </Box>\n          </FormikForm>\n        )}\n      </Formik>\n    </>\n  );\n}\n","import React from 'react';\nimport { Typography, Grid, Box } from '@material-ui/core';\nimport { makeStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Form from './components/Form';\n\nconst fontFamilyMetropolis = {\n  fontFamily: [\n    'Metropolis',\n    'Arial',\n    'sans-serif',\n    '\"Apple Color Emoji\"',\n    '\"Segoe UI Emoji\"',\n    '\"Segoe UI Symbol\"',\n  ].join(','),\n  letterSpacing: '0.015rem',\n};\n\nconst theme = createMuiTheme({\n  typography: {\n    h1: {\n      ...fontFamilyMetropolis,\n    },\n    h2: {\n      ...fontFamilyMetropolis,\n    },\n    h3: {\n      ...fontFamilyMetropolis,\n    },\n    h4: {\n      ...fontFamilyMetropolis,\n    },\n    h5: {\n      ...fontFamilyMetropolis,\n    },\n    h6: {\n      ...fontFamilyMetropolis,\n    },\n    subtitle1: {\n      ...fontFamilyMetropolis,\n    },\n    button: {\n      ...fontFamilyMetropolis,\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  subheading: {\n    color: '#fd5750',\n    fontWeight: '800',\n  },\n  button: {\n    borderRadius: 5,\n    color: '#FFF',\n    backgroundColor: '#fd5750',\n    '&:hover': {\n      backgroundColor: '#FD8984',\n    },\n  },\n  fieldTitle: {\n    textAlign: 'right',\n    fontWeight: '600',\n  },\n  fieldTitle2: {\n    fontWeight: '600',\n  },\n  header: {\n    backgroundColor: '#282c34',\n    color: 'white',\n    textAlign: 'center',\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        <header className={classes.header}>\n          <Box p={2}>\n            <Typography variant=\"h4\" component=\"h1\">\n              Serverless Permission Policy Generator\n            </Typography>\n          </Box>\n        </header>\n        <Grid container>\n          <Grid item md={4} xs={12}>\n            <Form />\n          </Grid>\n\n          <Grid item md={8} xs={12}>\n            <Box m={2}>\n              <Typography variant=\"subtitle1\" component=\"h2\" className={classes.subheading}>\n                Generated Code Here\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'fontsource-roboto';\nimport 'typeface-metropolis';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}