{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","checkedA","checkedB","state","setState","handleChange","event","target","name","checked","className","Grid","container","item","xs","FormControl","Box","m","Typography","variant","component","direction","justify","alignItems","spacing","TextField","id","InputLabelProps","shrink","FormControlLabel","control","Switch","onChange","RadioGroup","aria-label","value","Radio","label","Button","color","size","startIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec834182.chunk.js","sourcesContent":["import React from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport {\n  FormControl,\n  TextField,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Switch,\n  Typography,\n  Grid,\n  Button,\n  Box,\n} from \"@material-ui/core\";\n\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\n\nfunction App() {\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div>\n      <header className=\"App-header\">\n        Serverless Permission Policy Generator\n      </header>\n      <Grid container>\n        <Grid item xs={6}>\n          <FormControl>\n            <Box m={2}>\n              <Typography variant=\"h5\" component=\"h2\">\n                Project Meta Data\n              </Typography>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing=\"1\"\n              >\n                <Grid item xs>\n                  <Typography variant=\"h6\"> Project Name </Typography>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"standard-search\"\n                    InputLabelProps={{ shrink: false }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing=\"1\"\n              >\n                <Grid item xs>\n                  <Typography variant=\"h6\"> Group </Typography>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"standard-search\"\n                    InputLabelProps={{ shrink: false }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing=\"1\"\n              >\n                <Grid item xs>\n                  <Typography variant=\"h6\"> Role Name</Typography>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    id=\"standard-search\"\n                    InputLabelProps={{ shrink: false }}\n                  />\n                </Grid>\n              </Grid>\n            </Box>\n            {/* Second Part */}\n            <Box m={2}>\n              <Typography variant=\"h5\" component=\"h2\">\n                Project Dependencies\n              </Typography>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing=\"1\"\n              >\n                <Grid item>\n                  <Typography component=\"div\">\n                    <Typography variant=\"h6\"> Test Button 1</Typography>\n                    <Grid\n                      component=\"label\"\n                      container\n                      alignItems=\"center\"\n                      spacing={1}\n                    >\n                      <Grid item>Off</Grid>\n                      <Grid item>\n                        <FormControlLabel\n                          control={\n                            <Switch\n                              checked={state.checkedA}\n                              onChange={handleChange}\n                              name=\"checkedA\"\n                            />\n                          }\n                        />\n                      </Grid>\n                      <Grid item>On</Grid>\n                    </Grid>\n                  </Typography>\n                </Grid>\n              </Grid>\n\n              {/* first radio button field */}\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing=\"1\"\n              >\n                <Grid item xs>\n                  <Typography variant=\"h6\"> Packaging </Typography>\n                </Grid>\n\n                <RadioGroup\n                  aria-label=\"Packaging\"\n                  name=\"Packaging1\"\n                  onChange={handleChange}\n                >\n                  <Grid item>\n                    <FormControlLabel\n                      value=\"test1\"\n                      control={<Radio />}\n                      label=\"test1\"\n                    />\n                    <FormControlLabel\n                      value=\"test2\"\n                      control={<Radio />}\n                      label=\"test2\"\n                    />\n                  </Grid>\n                </RadioGroup>\n              </Grid>\n\n              {/* second radio button field */}\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing=\"1\"\n              >\n                <Grid item xs>\n                  <Typography variant=\"h6\"> Version </Typography>\n                </Grid>\n\n                <RadioGroup\n                  aria-label=\"version\"\n                  name=\"version1\"\n                  onChange={handleChange}\n                >\n                  <Grid item>\n                    <FormControlLabel\n                      value=\"test1\"\n                      control={<Radio />}\n                      label=\"test1\"\n                    />\n                    <FormControlLabel\n                      value=\"test2\"\n                      control={<Radio />}\n                      label=\"test2\"\n                    />\n                  </Grid>\n                </RadioGroup>\n              </Grid>\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                startIcon={<GetAppIcon />}\n              >\n                Generate\n              </Button>\n            </Box>\n          </FormControl>\n        </Grid>\n        <Grid item xs={6}>\n          12\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}